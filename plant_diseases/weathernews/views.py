# plant_diseases/weathernews/views.py
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework import generics
from rest_framework.response import Response
from rest_framework.views import APIView
from django.conf import settings # ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá API ‡¶ï‡ßÄ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import json
import re
import datetime
import requests # API ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

from .models import WeatherData, DailyForecast
from .serializers import WeatherDataSerializer, DailyForecastSerializer

# ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø ‡¶è‡¶™‡¶ø‡¶Ü‡¶á ‡¶ï‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡¶∏ (settings.py ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá)
GEMINI_API_KEY = settings.GEMINI_API_KEY
GEMINI_MODEL_NAME = settings.GEMINI_MODEL_NAME
GEMINI_API_URL = settings.GEMINI_API_URL

# Gradio ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶æ‡¶®‡ßç‡¶§‡¶∞‡¶ø‡¶§ ‡¶á‡¶â‡¶ü‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def parse_date_range(date_range_str):
    """‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶™‡¶∞‡¶ø‡¶∏‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶•‡ßá‡¶ï‡ßá ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá‡•§"""
    match = re.search(r'Next (\d+) Days', date_range_str)
    if match:
        return int(match.group(1))
    return 7 # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü

def get_condition_icon(condition_text):
    """‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶Æ‡ßã‡¶ú‡¶ø ‡¶Ü‡¶á‡¶ï‡¶® ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶Ø‡¶º‡•§"""
    if "Sunny" in condition_text or "‡¶∞‡ßå‡¶¶‡ßç‡¶∞‡ßã‡¶ú‡ßç‡¶ú‡ßç‡¶¨‡¶≤" in condition_text:
        return "‚òÄÔ∏è"
    elif "Cloudy" in condition_text or "‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ" in condition_text or "Partly Cloudy" in condition_text:
        return "‚òÅÔ∏è"
    elif "Rain" in condition_text or "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø" in condition_text or "Moderate Rain" in condition_text or "Heavy Rain" in condition_text:
        return "üåßÔ∏è"
    elif "Thunderstorm" in condition_text or "‡¶¨‡¶ú‡ßç‡¶∞‡¶™‡¶æ‡¶§" in condition_text:
        return "‚õàÔ∏è"
    else:
        return "‚ùì"

def parse_value_unit(s):
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∏‡ßÇ‡¶ö‡¶ï ‡¶Æ‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶á‡¶â‡¶®‡¶ø‡¶ü ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá‡•§"""
    if not isinstance(s, str):
        return None, ''
    match = re.match(r'([\d.]+)\s*(.*)', s.strip()) # Updated regex to handle float values
    if match:
        try:
            value = float(match.group(1))
            unit = match.group(2).strip()
            return value, unit
        except ValueError:
            pass
    return None, s


def get_gemini_forecast_structured(district_name, num_days):
    """
    ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø ‡¶è‡¶™‡¶ø‡¶Ü‡¶á ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞‡¶° (JSON) ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá‡•§
    """
    prompt = f"""
    ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ {district_name} ‡¶ú‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
    ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (gemini, give first weather data of today), ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π ‡¶ï‡¶∞‡ßÅ‡¶®:
    - ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ (‡¶∏‡ßá‡¶≤‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶∏) ‡¶Ø‡ßá‡¶Æ‡¶®: "‡ß©‡ß®¬∞C"
    - ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ (‡¶∏‡ßá‡¶≤‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶∏) ‡¶Ø‡ßá‡¶Æ‡¶®: "‡ß®‡ß´¬∞C"
    - ‡¶ó‡¶°‡¶º ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ (‡¶∏‡ßá‡¶≤‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶∏) ‡¶Ø‡ßá‡¶Æ‡¶®: "‡ß©‡ß¶¬∞C"
    - ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§ (‡¶Æ‡¶ø‡¶Æ‡¶ø) ‡¶Ø‡ßá‡¶Æ‡¶®: "‡ß´‡¶Æ‡¶ø‡¶Æ‡¶ø"
    - ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ (‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂) ‡¶Ø‡ßá‡¶Æ‡¶®: "‡ßÆ‡ß¶%"
    - ‡¶¨‡¶æ‡¶§‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ó‡¶§‡¶ø (‡¶ï‡¶ø‡¶Æ‡¶ø/‡¶ò‡¶£‡ßç‡¶ü‡¶æ) ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ (‡¶Ø‡ßá‡¶Æ‡¶®: "‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶¨‡¶æ‡¶§‡¶æ‡¶∏‡•§") ‡¶Ø‡ßá‡¶Æ‡¶®: "‡ßß‡ß¶ ‡¶ï‡¶ø‡¶Æ‡¶ø/‡¶ò‡¶£‡ßç‡¶ü‡¶æ"

    ‡¶è‡¶õ‡¶æ‡¶°‡¶º‡¶æ‡¶ì, ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ {num_days} ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏ ‡¶¶‡¶ø‡¶®‡•§ (gemini you will give here data of from today+1 day)
    ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø JSON ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π ‡¶ï‡¶∞‡ßÅ‡¶®:
    {{
        "date": "DD/MM/YYYY",
        "max_min_temp": "H¬∞ / L¬∞",
        "condition": "‡¶∞‡ßå‡¶¶‡ßç‡¶∞‡ßã‡¶ú‡ßç‡¶ú‡ßç‡¶¨‡¶≤/‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ/‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø/‡¶¨‡¶ú‡ßç‡¶∞‡¶™‡¶æ‡¶§/‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø",
        "rainfall": "Xmm",
        "humidity": "Y%",
        "wind_speed_direction": "Z km/h ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡¶∂‡¶®",
        "farmer_advice": "‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶™‡ßç‡¶∞‡¶≠‡¶æ‡¶¨‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ to the farmers"
    }}
    
    ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø JSON ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶¶‡¶ø‡¶® ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡ßÄ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá:
    "current_day_summary": ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ ‡¶°‡ßá‡¶ü‡¶æ‡•§
    "daily_forecast": ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ {num_days} ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶∞‡ßá ‡¶¨‡¶∞‡ßç‡¶£‡¶ø‡¶§ JSON ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§
    
    ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡¶∏‡¶Æ‡ßç‡¶Æ‡¶§ ‡¶Æ‡¶®‡ßá ‡¶π‡¶≤‡ßá‡¶ì ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶ø‡¶Æ‡ßÅ‡¶≤‡ßá‡¶∂‡¶®, ‡¶™‡ßç‡¶∞‡¶ï‡ßÉ‡¶§ ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶Ø‡¶º‡•§
    """

    headers = {
        'Content-Type': 'application/json'
    }
    payload = {
        "contents": [
            {
                "role": "user",
                "parts": [
                    {"text": prompt}
                ]
            }
        ],
        "generationConfig": {
            "responseMimeType": "application/json",
            "responseSchema": {
                "type": "OBJECT",
                "properties": {
                    "current_day_summary": {
                        "type": "OBJECT",
                        "properties": {
                            "max_temperature": {"type": "STRING"},
                            "min_temperature": {"type": "STRING"},
                            "avg_temperature": {"type": "STRING"},
                            "rainfall": {"type": "STRING"},
                            "humidity": {"type": "STRING"},
                            "wind_speed": {"type": "STRING"},
                            "wind_description": {"type": "STRING"}
                        },
                        "required": ["max_temperature", "min_temperature", "avg_temperature", "rainfall", "humidity", "wind_speed", "wind_description"]
                    },
                    "daily_forecast": {
                        "type": "ARRAY",
                        "items": {
                            "type": "OBJECT",
                            "properties": {
                                "date": {"type": "STRING"},
                                "max_min_temp": {"type": "STRING"},
                                "condition": {"type": "STRING"},
                                "rainfall": {"type": "STRING"},
                                "humidity": {"type": "STRING"},
                                "wind_speed_direction": {"type": "STRING"},
                                "farmer_advice": {"type": "STRING"}
                            },
                            "required": ["date", "max_min_temp", "condition", "rainfall", "humidity", "wind_speed_direction", "farmer_advice"]
                        }
                    }
                },
                "required": ["current_day_summary", "daily_forecast"]
            }
        }
    }

    try:
        response = requests.post(GEMINI_API_URL, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        result = response.json()

        if result.get("candidates") and result["candidates"][0].get("content") and \
           result["candidates"][0]["content"].get("parts") and result["candidates"][0]["content"]["parts"][0].get("text"):
            json_string = result["candidates"][0]["content"]["parts"][0]["text"]
            
            # Remove markdown code block if present
            if json_string.startswith("json\n") and json_string.endswith("\n```"):
                json_string = json_string[5:-3].strip()
            
            # Clean up escape characters and extra spaces
            json_string = json_string.replace('\\', '')
            json_string = re.sub(r'[\t\n\r]+', ' ', json_string)
            json_string = re.sub(r'\s{2,}', ' ', json_string)
            
            parsed_data = json.loads(json_string)
            
            print("\n--- ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü (JSON) ---")
            print(json.dumps(parsed_data, indent=2, ensure_ascii=False))
            print("------------------------------------\n")
            
            return parsed_data
        else:
            print("Error: Gemini response structure unexpected or content missing.")
            return None
    except requests.exceptions.RequestException as e:
        print(f"API request error: {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"JSON decode error: {e}. Raw response: {response.text if 'response' in locals() else 'N/A'}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None


# ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶≠‡¶ø‡¶â ‡¶Ø‡¶æ UI ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá
def weather_forecast_page(request):
    """‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏ ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® HTML ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§"""
    bangladesh_districts = [
        "‡¶¢‡¶æ‡¶ï‡¶æ", "‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ", "‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ", "‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ", "‡¶∏‡¶ø‡¶≤‡ßá‡¶ü", "‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤", "‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞", "‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π",
        "‡¶´‡¶∞‡¶ø‡¶¶‡¶™‡ßÅ‡¶∞", "‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ", "‡¶®‡ßã‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ", "‡¶¨‡¶ó‡ßÅ‡¶°‡¶º‡¶æ", "‡¶¶‡¶ø‡¶®‡¶æ‡¶ú‡¶™‡ßÅ‡¶∞", "‡¶Ø‡¶∂‡ßã‡¶∞", "‡¶ï‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡¶Ø‡¶º‡¶æ",
        "‡¶ü‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶á‡¶≤", "‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶ó‡¶û‡ßç‡¶ú", "‡¶ö‡¶æ‡¶Å‡¶¶‡¶™‡ßÅ‡¶∞", "‡¶¨‡ßç‡¶∞‡¶æ‡¶π‡ßç‡¶Æ‡¶£‡¶¨‡¶æ‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡¶æ", "‡¶ó‡¶æ‡¶ú‡ßÄ‡¶™‡ßÅ‡¶∞", "‡¶®‡¶æ‡¶∞‡¶æ‡¶Ø‡¶º‡¶£‡¶ó‡¶û‡ßç‡¶ú",
        "‡¶Æ‡ßÅ‡¶®‡ßç‡¶∏‡¶ø‡¶ó‡¶û‡ßç‡¶ú", "‡¶ó‡ßã‡¶™‡¶æ‡¶≤‡¶ó‡¶û‡ßç‡¶ú", "‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∞‡ßÄ‡¶™‡ßÅ‡¶∞", "‡¶∂‡¶∞‡ßÄ‡¶Ø‡¶º‡¶§‡¶™‡ßÅ‡¶∞", "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ", "‡¶Æ‡¶æ‡¶®‡¶ø‡¶ï‡¶ó‡¶û‡ßç‡¶ú",
        "‡¶®‡ßá‡¶§‡ßç‡¶∞‡¶ï‡ßã‡¶£‡¶æ", "‡¶∂‡ßá‡¶∞‡¶™‡ßÅ‡¶∞", "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶≤‡¶™‡ßÅ‡¶∞", "‡¶®‡¶ì‡¶ó‡¶æ‡¶Å", "‡¶®‡¶æ‡¶ü‡ßã‡¶∞", "‡¶ú‡¶Ø‡¶º‡¶™‡ßÅ‡¶∞‡¶π‡¶æ‡¶ü", "‡¶ö‡¶æ‡¶Å‡¶™‡¶æ‡¶á‡¶®‡¶¨‡¶æ‡¶¨‡¶ó‡¶û‡ßç‡¶ú",
        "‡¶™‡¶æ‡¶¨‡¶®‡¶æ", "‡¶∏‡¶ø‡¶∞‡¶æ‡¶ú‡¶ó‡¶û‡ßç‡¶ú", "‡¶™‡¶û‡ßç‡¶ö‡¶ó‡¶°‡¶º", "‡¶†‡¶æ‡¶ï‡ßÅ‡¶∞‡¶ó‡¶æ‡¶Å‡¶ì", "‡¶®‡ßÄ‡¶≤‡¶´‡¶æ‡¶Æ‡¶æ‡¶∞‡ßÄ", "‡¶≤‡¶æ‡¶≤‡¶Æ‡¶®‡¶ø‡¶∞‡¶π‡¶æ‡¶ü",
        "‡¶ï‡ßÅ‡¶°‡¶º‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ", "‡¶ó‡¶æ‡¶á‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶æ", "‡¶®‡¶°‡¶º‡¶æ‡¶á‡¶≤", "‡¶∏‡¶æ‡¶§‡¶ï‡ßç‡¶∑‡ßÄ‡¶∞‡¶æ", "‡¶ö‡ßÅ‡¶Ø‡¶º‡¶æ‡¶°‡¶æ‡¶ô‡ßç‡¶ó‡¶æ", "‡¶Æ‡ßá‡¶π‡ßá‡¶∞‡¶™‡ßÅ‡¶∞",
        "‡¶ù‡¶ø‡¶®‡¶æ‡¶á‡¶¶‡¶π", "‡¶Æ‡¶æ‡¶ó‡ßÅ‡¶∞‡¶æ", "‡¶¨‡¶æ‡¶ó‡ßá‡¶∞‡¶π‡¶æ‡¶ü", "‡¶™‡¶ø‡¶∞‡ßã‡¶ú‡¶™‡ßÅ‡¶∞", "‡¶≠‡ßã‡¶≤‡¶æ", "‡¶™‡¶ü‡ßÅ‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ", "‡¶¨‡¶∞‡¶ó‡ßÅ‡¶®‡¶æ",
        "‡¶ù‡¶æ‡¶≤‡¶ï‡¶æ‡¶†‡¶ø", "‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Æ‡ßÄ‡¶™‡ßÅ‡¶∞", "‡¶´‡ßá‡¶®‡ßÄ", "‡¶ï‡¶ï‡ßç‡¶∏‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞", "‡¶¨‡¶æ‡¶®‡ßç‡¶¶‡¶∞‡¶¨‡¶æ‡¶®", "‡¶∞‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶Æ‡¶æ‡¶ü‡¶ø", "‡¶ñ‡¶æ‡¶ó‡¶°‡¶º‡¶æ‡¶õ‡¶°‡¶º‡¶ø"
    ]
    date_ranges = ["Next 7 Days", "Next 14 Days", "Next 30 Days"]
    
    context = {
        'districts': bangladesh_districts,
        'date_ranges': date_ranges
    }
    return render(request, 'weathernews/weathernews.html', context)


# API ‡¶≠‡¶ø‡¶â ‡¶Ø‡¶æ ‡¶ú‡ßá‡¶Æ‡¶ø‡¶®‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ UI ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø JSON ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶¨‡ßá
@csrf_exempt # ‡¶è‡¶ü‡¶ø POST ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø CSRF ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶æ‡¶á‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡ßá‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá API ‡¶ï‡ßÄ ‡¶¨‡¶æ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡¶•‡ßá‡¶®‡ßç‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
def get_and_save_weather_data(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            
            location = data.get('location', 'Unknown')
            date_range_str = data.get('date_range', 'Next 7 Days')
            num_days = parse_date_range(date_range_str)

            gemini_data = get_gemini_forecast_structured(location, num_days)

            if gemini_data:
                current_summary = gemini_data.get("current_day_summary", {})
                daily_forecasts_data = gemini_data.get("daily_forecast", [])

                # WeatherData ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
                max_temp_val, max_temp_unit = parse_value_unit(current_summary.get('max_temperature'))
                min_temp_val, min_temp_unit = parse_value_unit(current_summary.get('min_temperature'))
                avg_temp_val, avg_temp_unit = parse_value_unit(current_summary.get('avg_temperature'))
                rainfall_val, rainfall_unit = parse_value_unit(current_summary.get('rainfall'))
                humidity_val, humidity_unit = parse_value_unit(current_summary.get('humidity'))
                wind_speed_val, wind_speed_unit = parse_value_unit(current_summary.get('wind_speed'))

                weather_record = WeatherData.objects.create(
                    location=location,
                    max_temperature_value=max_temp_val,
                    max_temperature_unit=max_temp_unit if max_temp_unit else '¬∞C',
                    min_temperature_value=min_temp_val,
                    min_temperature_unit=min_temp_unit if min_temp_unit else '¬∞C',
                    avg_temperature_value=avg_temp_val,
                    avg_temperature_unit=avg_temp_unit if avg_temp_unit else '¬∞C',
                    rainfall_value=rainfall_val,
                    rainfall_unit=rainfall_unit if rainfall_unit else 'mm',
                    humidity_value=humidity_val,
                    humidity_unit=humidity_unit if humidity_unit else '%',
                    wind_speed_value=wind_speed_val,
                    wind_speed_unit=wind_speed_unit if wind_speed_unit else 'km/h',
                    wind_description=current_summary.get('wind_description', '')
                )

                # DailyForecast ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
                for forecast in daily_forecasts_data:
                    try:
                        forecast_date_str = forecast.get('date', '')
                        forecast_date = datetime.datetime.strptime(forecast_date_str, "%d/%m/%Y").date()
                    except ValueError:
                        print(f"Date parsing error: Could not parse '{forecast_date_str}' with format DD/MM/YYYY. Falling back to today + index.")
                        forecast_date = datetime.date.today() + datetime.timedelta(days=daily_forecasts_data.index(forecast))
                    except Exception as e:
                        print(f"General date parsing error: {e} for date: {forecast.get('date')}")
                        forecast_date = datetime.date.today() + datetime.timedelta(days=daily_forecasts_data.index(forecast))

                    DailyForecast.objects.create(
                        weather_record=weather_record,
                        forecast_date=forecast_date,
                        max_min_temp=forecast.get('max_min_temp', 'N/A'),
                        condition=forecast.get('condition', 'N/A'),
                        rainfall=forecast.get('rainfall', 'N/A'),
                        humidity=forecast.get('humidity', 'N/A'),
                        wind_speed_direction=forecast.get('wind_speed_direction', 'N/A'),
                        farmer_advice=forecast.get('farmer_advice', 'N/A')
                    )
                
                # UI ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                response_data = {
                    'status': 'success',
                    'location': location,
                    'current_summary': current_summary,
                    'daily_forecast': daily_forecasts_data
                }
                return JsonResponse(response_data)
            else:
                return JsonResponse({'status': 'error', 'message': 'Failed to get data from Gemini API'}, status=500)
        except json.JSONDecodeError:
            return JsonResponse({'status': 'error', 'message': 'Invalid JSON'}, status=400)
        except Exception as e:
            return JsonResponse({'status': 'error', 'message': str(e)}, status=500)
    return JsonResponse({'status': 'error', 'message': 'Only POST method allowed'}, status=405)


# Django REST Framework API Views (List/Retrieve)
class WeatherDataListAPIView(generics.ListAPIView):
    queryset = WeatherData.objects.all().order_by('-recorded_at')
    serializer_class = WeatherDataSerializer

class WeatherDataDetailAPIView(generics.RetrieveAPIView):
    queryset = WeatherData.objects.all()
    serializer_class = WeatherDataSerializer

class DailyForecastListAPIView(generics.ListAPIView):
    queryset = DailyForecast.objects.all().order_by('forecast_date')
    serializer_class = DailyForecastSerializer

class DailyForecastDetailAPIView(generics.RetrieveAPIView):
    queryset = DailyForecast.objects.all()
    serializer_class = DailyForecastSerializer